[{"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\index.tsx":"1","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\App.tsx":"2","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\API.ts":"3","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\utils.ts":"4","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\createQuestions\\CreateQuestionsPage.tsx":"5","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\quizGame\\QuizGame.tsx":"6","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\App.styles.ts":"7","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\quizGame\\QuizGame.styles.ts":"8","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\createQuestions\\CreateQuestion.styles.ts":"9","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navigation\\index.ts":"10","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navigation\\Navigation.tsx":"11","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\index.ts":"12","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\createQuestions\\index.ts":"13","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\quizGame\\index.ts":"14","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\homePage\\index.ts":"15","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\homePage\\HomePage.tsx":"16","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionCard\\QuestionCard.tsx":"17","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\homePage\\HomePage.styles.ts":"18","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\index.ts":"19","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\pageHeader\\index.ts":"20","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionCard\\index.ts":"21","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\pageHeader\\PageHeader.tsx":"22","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\pageHeader\\PageHeader.styles.ts":"23","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\viewAllQuestions\\index.ts":"24","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\viewAllQuestions\\ViewAllQuestions.tsx":"25","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navBar\\index.ts":"26","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navBar\\NavBar.tsx":"27","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navBar\\NavBar.styles.ts":"28","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\viewAllQuestions\\ViewAllQuestions.styles.ts":"29","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionIndex\\index.ts":"30","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionIndex\\QuestionIndex.tsx":"31","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionIndex\\QuestionIndex.styles.ts":"32","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\editQuestion\\index.ts":"33","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\editQuestion\\EditQuestionPage.tsx":"34","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\editQuestion\\EditQuestion.styles.ts":"35","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionCard\\QuestionCard.styles.ts":"36","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\openTrivia\\index.ts":"37","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\openTrivia\\OpenTriviaPage.tsx":"38"},{"size":197,"mtime":1611340767902,"results":"39","hashOfConfig":"40"},{"size":373,"mtime":1611722575575,"results":"41","hashOfConfig":"40"},{"size":8022,"mtime":1611899736031,"results":"42","hashOfConfig":"40"},{"size":437,"mtime":1611760346108,"results":"43","hashOfConfig":"40"},{"size":13706,"mtime":1611862598429,"results":"44","hashOfConfig":"40"},{"size":8029,"mtime":1611899768161,"results":"45","hashOfConfig":"40"},{"size":1742,"mtime":1611724799450,"results":"46","hashOfConfig":"40"},{"size":992,"mtime":1611898652109,"results":"47","hashOfConfig":"40"},{"size":1761,"mtime":1611728888161,"results":"48","hashOfConfig":"40"},{"size":29,"mtime":1611530699922,"results":"49","hashOfConfig":"40"},{"size":895,"mtime":1611733456946,"results":"50","hashOfConfig":"40"},{"size":193,"mtime":1611734009171,"results":"51","hashOfConfig":"40"},{"size":38,"mtime":1611530627401,"results":"52","hashOfConfig":"40"},{"size":27,"mtime":1611530642442,"results":"53","hashOfConfig":"40"},{"size":27,"mtime":1611531614944,"results":"54","hashOfConfig":"40"},{"size":906,"mtime":1611699803314,"results":"55","hashOfConfig":"40"},{"size":1565,"mtime":1611898120487,"results":"56","hashOfConfig":"40"},{"size":419,"mtime":1611699888931,"results":"57","hashOfConfig":"40"},{"size":156,"mtime":1611627545376,"results":"58","hashOfConfig":"40"},{"size":29,"mtime":1611532301236,"results":"59","hashOfConfig":"40"},{"size":31,"mtime":1611532288361,"results":"60","hashOfConfig":"40"},{"size":368,"mtime":1611718226291,"results":"61","hashOfConfig":"40"},{"size":919,"mtime":1611730810299,"results":"62","hashOfConfig":"40"},{"size":35,"mtime":1611536777048,"results":"63","hashOfConfig":"40"},{"size":1552,"mtime":1611773583452,"results":"64","hashOfConfig":"40"},{"size":25,"mtime":1611541360282,"results":"65","hashOfConfig":"40"},{"size":1144,"mtime":1611733708290,"results":"66","hashOfConfig":"40"},{"size":350,"mtime":1611695066649,"results":"67","hashOfConfig":"40"},{"size":734,"mtime":1611717458561,"results":"68","hashOfConfig":"40"},{"size":32,"mtime":1611545858029,"results":"69","hashOfConfig":"40"},{"size":4217,"mtime":1611853502035,"results":"70","hashOfConfig":"40"},{"size":549,"mtime":1611729724475,"results":"71","hashOfConfig":"40"},{"size":35,"mtime":1611591096189,"results":"72","hashOfConfig":"40"},{"size":16449,"mtime":1611859012042,"results":"73","hashOfConfig":"40"},{"size":2435,"mtime":1611726141122,"results":"74","hashOfConfig":"40"},{"size":1122,"mtime":1611900952148,"results":"75","hashOfConfig":"40"},{"size":33,"mtime":1611734006229,"results":"76","hashOfConfig":"40"},{"size":5338,"mtime":1611853426489,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"ki0vap",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"80"},"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\index.tsx",[],["159","160"],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\App.tsx",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\API.ts",["161","162","163","164","165"],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\utils.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\createQuestions\\CreateQuestionsPage.tsx",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\quizGame\\QuizGame.tsx",["166","167","168","169","170"],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\App.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\quizGame\\QuizGame.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\createQuestions\\CreateQuestion.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navigation\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navigation\\Navigation.tsx",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\createQuestions\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\quizGame\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\homePage\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\homePage\\HomePage.tsx",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionCard\\QuestionCard.tsx",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\homePage\\HomePage.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\pageHeader\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionCard\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\pageHeader\\PageHeader.tsx",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\pageHeader\\PageHeader.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\viewAllQuestions\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\viewAllQuestions\\ViewAllQuestions.tsx",["171"],"import React, { useEffect, useState } from 'react';\r\nimport { deleteAllQuestions, fetchAllQuestions, Question, testQueryLimit } from '../../API';\r\nimport { QuestionIndex } from '../../components';\r\nimport { ViewQuestionsStyle } from './ViewAllQuestions.styles';\r\n\r\nexport const ViewQuestionsPage = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchAllQuestions()\r\n    .then(data => {\r\n      setQuestions(data)\r\n    })\r\n    .catch((error) => console.error(error))\r\n    setLoading(false)\r\n  }, [])\r\n\r\n  return (\r\n    <ViewQuestionsStyle>\r\n      <h1>All Questions: </h1>\r\n      {loading && <h3>Loading...</h3>}\r\n      <button onClick={() => testQueryLimit(10)}>Test Query Limit</button>\r\n      {questions &&\r\n      <table id='question-table'>\r\n        <thead>\r\n          <tr id='header-row'>\r\n            <th>Category</th>\r\n            <th>Question</th>\r\n            {/* <th>Answer</th> */}\r\n            <th>Difficulty</th>\r\n            <th>Type</th>\r\n            <th>Edit</th>\r\n            <th>Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {questions &&\r\n            questions.map(question => (\r\n              <QuestionIndex\r\n              question={question}\r\n              key={question._id}\r\n              />\r\n            ))\r\n          }\r\n        </tbody>\r\n      </table>}\r\n      <a href='/questions/create' >\r\n        <button>New Question</button>\r\n      </a>\r\n    </ViewQuestionsStyle>\r\n  )\r\n}","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navBar\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navBar\\NavBar.tsx",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\navBar\\NavBar.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\viewAllQuestions\\ViewAllQuestions.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionIndex\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionIndex\\QuestionIndex.tsx",["172","173","174","175","176"],"import { useEffect, useState } from 'react';\r\nimport { Question, deleteQuestion, QType } from '../../API';\r\nimport { capitalize, htmlDecode } from '../../utils';\r\nimport { QuestionIndexStyle } from './QuestionIndex.styles'\r\nimport EditIcon from '../../images/edit-blue.png';\r\nimport DeleteIcon from '../../images/delete-red.png';\r\n\r\nexport interface IQuestionProps {\r\n  question: Question,\r\n}\r\n\r\nexport const QuestionIndex = (props: React.PropsWithChildren<IQuestionProps>) => {\r\n  const [typeLabelText, setTypeLabelText] = useState<string>('default');\r\n  const [correctAnswerRate, setCorrectAnswerRate] = useState<number>(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [difficultyColor, setDifficultyColor] = useState('');\r\n  const [questionType, setQuestionType] = useState<QType>(QType.UNSET);\r\n  const [questionText, setQuestionText] = useState('')\r\n  const [submittingQuestion, setSubmittingQuestion] = useState(false);\r\n\r\n  let {\r\n    category,\r\n    question,\r\n    type,\r\n    difficulty,\r\n    times_correct,\r\n    times_incorrect,\r\n    _id\r\n  } = props.question\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    switch(type) {\r\n      case QType.CHOOSE_MANY:\r\n        setTypeLabelText('Many');\r\n        setQuestionType(QType.CHOOSE_MANY);\r\n        break;\r\n      case QType.MULTIPLE_CHOICE:\r\n        setTypeLabelText('MC');\r\n        setQuestionType(QType.MULTIPLE_CHOICE);\r\n        break;\r\n      case QType.OPEN_ENDED:\r\n        setTypeLabelText('Open');\r\n        setQuestionType(QType.OPEN_ENDED);\r\n        break;\r\n      case QType.TRUE_FALSE:\r\n        setTypeLabelText('T/F');\r\n        setQuestionType(QType.TRUE_FALSE);\r\n        break;\r\n      default:\r\n        setTypeLabelText('N/A');\r\n        setQuestionType(QType.UNSET);\r\n    };\r\n    switch(difficulty) {\r\n      case 'kids':\r\n        setDifficultyColor('purple');\r\n        break;\r\n      case 'easy':\r\n        setDifficultyColor('green');\r\n        break;\r\n      case 'medium':\r\n        setDifficultyColor('orange');\r\n        break;\r\n      case 'hard':\r\n        setDifficultyColor('red');\r\n        break;\r\n      default:\r\n        setDifficultyColor('blue');\r\n        break;\r\n    }\r\n    if (times_correct + times_incorrect > 0) {\r\n      setCorrectAnswerRate(times_correct / (times_correct + times_incorrect))\r\n    }\r\n    setQuestionText(htmlDecode(question))\r\n    // const newQuestion: Question = {\r\n    //   category,\r\n    //   type: questionType,\r\n    //   difficulty,\r\n    //   question: htmlDecode(question),\r\n    //   correct_answers: []\r\n\r\n    // }\r\n    setLoading(false)\r\n  }, [times_correct, times_incorrect, type, loading])\r\n\r\n  const toggleDelete = () => {\r\n    setLoading(true);\r\n    if (window.confirm(\r\n      'Are you sure? This can not be undone.'\r\n    )) {\r\n      console.log('Deleting Question: ', question)\r\n      deleteQuestion(_id)\r\n      .catch((error) => console.error(error))\r\n    }\r\n    setLoading(false)\r\n  }\r\n\r\n  // const displayAnswerString = (answer: string[]): string => {\r\n  //     return capitalize(answer.join(', '))\r\n  // }\r\n\r\n  const editURL = `/questions/edit/${_id}`\r\n\r\n  return (\r\n    <>\r\n      {loading ?\r\n      <QuestionIndexStyle>\r\n      <td></td>\r\n      <td>Loading question...</td>\r\n      <td />\r\n      <td />\r\n      <td />\r\n      <td />\r\n      </QuestionIndexStyle> :\r\n      <QuestionIndexStyle onClick={() => console.log(props.question)} >\r\n        <td id='category'>{capitalize(category)}</td>\r\n        <td id='question'>{htmlDecode(question)}</td>\r\n        {/* <td id='answer'>{correct_answers.map((answer) => {\r\n          return <><span>{answer}</span><br /></>\r\n        })}</td> */}\r\n        <td id='difficulty'>\r\n          <span>{capitalize(difficulty)}</span>\r\n          <hr style={{borderColor: difficultyColor, boxShadow: `2px 2px 5px ${difficultyColor}`}}/>\r\n          <span id='correct-rate'>{correctAnswerRate * 100}% correct</span>\r\n        </td>\r\n        <td id='type'>{typeLabelText}</td>\r\n        <td id='edit'>\r\n          <a href={editURL}>\r\n            <img src={EditIcon} alt='Edit' />\r\n          </a>\r\n        </td>\r\n        <td id='delete' onClick={() => toggleDelete()}>\r\n          <img src={DeleteIcon} alt='Delete' />\r\n        </td>\r\n      </QuestionIndexStyle>}\r\n    </>\r\n  )\r\n}","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionIndex\\QuestionIndex.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\editQuestion\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\editQuestion\\EditQuestionPage.tsx",["177","178","179","180"],"import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport {\r\n  Question,\r\n  QType,\r\n  updateQuestion,\r\n  fetchSomeQuestions,\r\n  fetchSingleQuestion,\r\n  Difficulty,\r\n  deleteQuestion,\r\n} from \"../../API\";\r\nimport {\r\n  EditQuestionPageStyle,\r\n  EditQuestionStyle,\r\n} from \"./EditQuestion.styles\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport const EditQuestionsPage = () => {\r\n  const [categories] = useState<string[]>([\r\n    \"movies\",\r\n    \"music\",\r\n    \"television\",\r\n    \"geography\",\r\n    \"math\",\r\n    \"literature\",\r\n    \"other\",\r\n  ]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [difficulty, setDifficulty] = useState<Difficulty>(Difficulty.UNSET);\r\n  const [type, setType] = useState<QType>(QType.UNSET);\r\n  const [category, setCategory] = useState(\"\");\r\n  const [newCategory, setNewCategory] = useState(\"\");\r\n  const [correctAnswers, setCorrectAnswers] = useState<string[]>([\"\"]);\r\n  const [incorrectAnswers, setIncorrectAnswers] = useState<string[]>([\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n  ]);\r\n  const [questionID, setQuestionID] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [updateComplete, setUpdateComplete] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchSingleQuestion(questionID)\r\n      .then((data) => {\r\n        data = data[0];\r\n        setQuestion(data.question);\r\n        setDifficulty(data.difficulty);\r\n        if (data.correct_answers !== []) {\r\n          setCorrectAnswers(data.correct_answers);\r\n        } else {\r\n          setCorrectAnswers([\"\"]);\r\n        }\r\n        setIncorrectAnswers(data.incorrect_answers);\r\n        setQuestionID(data._id);\r\n        if (categories.includes(data.category)) {\r\n          setCategory(data.category);\r\n        } else {\r\n          setCategory(\"other\");\r\n          setNewCategory(data.category);\r\n        }\r\n        setType(data.type)\r\n      })\r\n      .catch((error) => console.error(error));\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const handleDelete = async () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to delete this question? This action can not be undone.\"\r\n      )\r\n    ) {\r\n      deleteQuestion(questionID);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setLoading(true);\r\n    const newQuestion = new Question(\r\n      category,\r\n      type,\r\n      difficulty,\r\n      question,\r\n      correctAnswers.filter((answer) => answer !== ''),\r\n      incorrectAnswers,\r\n      \"Drewski\"\r\n      )\r\n      if (category === \"other\") {\r\n        newQuestion.category = newCategory;\r\n      }\r\n      // category,\r\n      // correct_answers: correctAnswers.filter((answer) => answer !== \"\"),\r\n      // difficulty,\r\n      // question,\r\n      // incorrect_answers: [],\r\n      // times_correct: timesCorrect,\r\n      // times_incorrect: timesIncorrect,\r\n      // type: QuestionType.MULTIPLE_CHOICE,\r\n      // uploaded_by: 'Guest',\r\n      // _id: questionID,\r\n    // if (type === \"multiple choice\") {\r\n    //   newQuestion.incorrect_answers = incorrectAnswers;\r\n    //   newQuestion.type = QuestionType.MULTIPLE_CHOICE;\r\n    // }\r\n    // if (type === \"true or false\") {\r\n    //   newQuestion.type = QuestionType.TRUE_FALSE;\r\n    //   if (correctAnswers[0] === \"True\") {\r\n    //     newQuestion.incorrect_answers = [\"False\"];\r\n    //   } else {\r\n    //     newQuestion.incorrect_answers = [\"True\"];\r\n    //   }\r\n    // }\r\n    // if (type === \"open ended\") {\r\n    //   newQuestion.incorrect_answers = [];\r\n    //   newQuestion.type = QuestionType.OPEN_ENDED;\r\n    // }\r\n    // if (type === \"choose many\") {\r\n    //   newQuestion.incorrect_answers = [];\r\n    //   newQuestion.type = QuestionType.CHOOSE_MANY;\r\n    // } else {\r\n    //   newQuestion.correct_answers = correctAnswers.filter((_, i) => i < 1);\r\n    // }\r\n    await updateQuestion(questionID, newQuestion).then(() => {\r\n      setMessage(\"Question Updated!\");\r\n      setUpdateComplete(true);\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  const toggleDifficulty = (level: Difficulty) => {\r\n    if (level === difficulty) {\r\n      setDifficulty(Difficulty.UNSET);\r\n    } else {\r\n      setDifficulty(level);\r\n    }\r\n  };\r\n\r\n  const toggleType = (level: QType) => {\r\n    if (level === type) {\r\n      setType(QType.UNSET);\r\n    } else {\r\n      setType(level);\r\n    }\r\n  };\r\n\r\n  const toggleCategory = (level: string) => {\r\n    if (level === category) {\r\n      setCategory(\"\");\r\n    } else {\r\n      setCategory(level);\r\n    }\r\n  };\r\n\r\n  const toggleTF = (choice: string[]) => {\r\n    if (correctAnswers === choice) {\r\n      setCorrectAnswers([]);\r\n    } else {\r\n      setCorrectAnswers(choice);\r\n    }\r\n  };\r\n\r\n  const updateAnswers = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const target = e.target as HTMLInputElement;\r\n    let index = parseInt(target.id);\r\n    let currentAnswers = [...correctAnswers];\r\n    currentAnswers[index] = target.value;\r\n    setCorrectAnswers(currentAnswers);\r\n  };\r\n\r\n  const addAnswerInput = () => {\r\n    setCorrectAnswers((prev) => [...prev, \"\"]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <EditQuestionPageStyle />\r\n      <header>\r\n        <h1>Edit Question</h1>\r\n      </header>\r\n      <EditQuestionStyle>\r\n        {loading ? (\r\n          <h3>Loading...</h3>\r\n        ) : updateComplete && message ? (\r\n          <h3>{message}</h3>\r\n        ) : (\r\n          <form>\r\n            <label className=\"field-label\">Difficulty:</label>\r\n            <br />\r\n            <input\r\n              style={\r\n                difficulty === \"kids\" ? { boxShadow: \"0 0 15px cyan\" } : {}\r\n              }\r\n              className=\"button\"\r\n              type=\"button\"\r\n              value={Difficulty.KIDS}\r\n              name=\"kids\"\r\n              id=\"kids\"\r\n              onClick={() => toggleDifficulty(Difficulty.KIDS)}\r\n            />\r\n            <input\r\n              style={\r\n                difficulty === \"easy\" ? { boxShadow: \"0 0 15px cyan\" } : {}\r\n              }\r\n              className=\"button\"\r\n              type=\"button\"\r\n              value={Difficulty.EASY}\r\n              name=\"easy\"\r\n              id=\"easy\"\r\n              onClick={() => toggleDifficulty(Difficulty.EASY)}\r\n            />\r\n            <input\r\n              style={\r\n                difficulty === \"medium\" ? { boxShadow: \"0 0 15px cyan\" } : {}\r\n              }\r\n              className=\"button\"\r\n              type=\"button\"\r\n              value={Difficulty.MEDIUM}\r\n              name=\"medium\"\r\n              id=\"medium\"\r\n              onClick={() => toggleDifficulty(Difficulty.MEDIUM)}\r\n            />\r\n            <input\r\n              style={\r\n                difficulty === \"hard\" ? { boxShadow: \"0 0 15px cyan\" } : {}\r\n              }\r\n              className=\"button\"\r\n              type=\"button\"\r\n              value={Difficulty.HARD}\r\n              name=\"hard\"\r\n              id=\"hard\"\r\n              onClick={() => toggleDifficulty(Difficulty.HARD)}\r\n            />\r\n            <br />\r\n            <label className=\"field-label\">Type of question:</label>\r\n            <br />\r\n            <input\r\n              style={\r\n                type === QType.MULTIPLE_CHOICE ? { boxShadow: \"0 0 15px cyan\" } : {}\r\n              }\r\n              className=\"button\"\r\n              type=\"button\"\r\n              value=\"Multiple Choice\"\r\n              onClick={() => toggleType(QType.MULTIPLE_CHOICE)}\r\n            />\r\n            <input\r\n              style={\r\n                type === QType.TRUE_FALSE ? { boxShadow: \"0 0 15px cyan\" } : {}\r\n              }\r\n              className=\"button\"\r\n              type=\"button\"\r\n              value=\"True or False\"\r\n              onClick={() => toggleType(QType.TRUE_FALSE)}\r\n            />\r\n            <input\r\n              style={\r\n                type === QType.OPEN_ENDED ? { boxShadow: \"0 0 15px cyan\" } : {}\r\n              }\r\n              className=\"button\"\r\n              type=\"button\"\r\n              value=\"Open Ended\"\r\n              onClick={() => toggleType(QType.OPEN_ENDED)}\r\n            />\r\n            <input\r\n              style={\r\n                type === QType.CHOOSE_MANY ? { boxShadow: \"0 0 15px cyan\" } : {}\r\n              }\r\n              className=\"button\"\r\n              type=\"button\"\r\n              value=\"Choose Many\"\r\n              onClick={() => toggleType(QType.CHOOSE_MANY)}\r\n            />\r\n            <br />\r\n            <label className=\"field-label\">Category:</label>\r\n            <br />\r\n            <div id=\"category-selector\">\r\n              {categories ? (\r\n                categories.map((cat, i, list) => {\r\n                  console.log(list[i]);\r\n                  console.log(cat, i, list);\r\n                  if (cat !== \"\") {\r\n                    return (\r\n                      <input\r\n                        style={\r\n                          cat === category ? { boxShadow: \"0 0 15px cyan\" } : {}\r\n                        }\r\n                        id={cat}\r\n                        key={String(Math.random())}\r\n                        className=\"button\"\r\n                        type=\"button\"\r\n                        value={\r\n                          categories.includes(cat)\r\n                            ? cat.toLowerCase()\r\n                            : newCategory.toLowerCase()\r\n                        }\r\n                        onClick={(e) => toggleCategory(e.currentTarget.value)}\r\n                      />\r\n                    );\r\n                  }\r\n                })\r\n              ) : (\r\n                <span>Loading Categories...</span>\r\n              )}\r\n            </div>\r\n            <br />\r\n            {category === \"other\" ? (\r\n              <>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"category\"\r\n                  className=\"question-input\"\r\n                  autoFocus\r\n                  value={category !== \"other\" ? category : newCategory}\r\n                  placeholder=\"Category\"\r\n                  onChange={(e) => setNewCategory(e.currentTarget.value)}\r\n                />\r\n                <br />\r\n              </>\r\n            ) : null}\r\n            <label className=\"field-label\">Question:</label>\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              name=\"question\"\r\n              id=\"question\"\r\n              className=\"question-input\"\r\n              value={question}\r\n              onChange={(e) => setQuestion(e.currentTarget.value)}\r\n              placeholder=\"Type your question here...\"\r\n            />\r\n            <br />\r\n            {type === QType.CHOOSE_MANY ? (\r\n              <label className=\"field-label\">Answers:</label>\r\n            ) : (\r\n              <label className=\"field-label\">Answer:</label>\r\n            )}\r\n            <br />\r\n            {type === QType.MULTIPLE_CHOICE ? (\r\n              <div id=\"multiple-choice-answers\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"question-input correct-answer\"\r\n                  id=\"correct-answer\"\r\n                  placeholder=\"Correct answer...\"\r\n                  value={correctAnswers[0]}\r\n                  onChange={(e) => setCorrectAnswers([e.currentTarget.value])}\r\n                />\r\n                <br />\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"question-input incorrect-answer\"\r\n                  id=\"incorrect-answer\"\r\n                  placeholder=\"Incorrect answer...\"\r\n                  value={incorrectAnswers[0]}\r\n                  onChange={(e) =>\r\n                    setIncorrectAnswers([\r\n                      e.currentTarget.value,\r\n                      incorrectAnswers[1],\r\n                      incorrectAnswers[2],\r\n                    ])\r\n                  }\r\n                />\r\n                <br />\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"question-input incorrect-answer\"\r\n                  id=\"incorrect-answer\"\r\n                  placeholder=\"Incorrect answer...\"\r\n                  value={incorrectAnswers[1]}\r\n                  onChange={(e) =>\r\n                    setIncorrectAnswers([\r\n                      incorrectAnswers[0],\r\n                      e.currentTarget.value,\r\n                      incorrectAnswers[2],\r\n                    ])\r\n                  }\r\n                />\r\n                <br />\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"question-input incorrect-answer\"\r\n                  id=\"incorrect-answer\"\r\n                  placeholder=\"Incorrect answer...\"\r\n                  value={incorrectAnswers[2]}\r\n                  onChange={(e) =>\r\n                    setIncorrectAnswers([\r\n                      incorrectAnswers[0],\r\n                      incorrectAnswers[1],\r\n                      e.currentTarget.value,\r\n                    ])\r\n                  }\r\n                />\r\n              </div>\r\n            ) : type === QType.TRUE_FALSE ? (\r\n              <>\r\n                <input\r\n                  style={\r\n                    correctAnswers[0] === \"True\"\r\n                      ? { boxShadow: \"0 0 15px cyan\" }\r\n                      : {}\r\n                  }\r\n                  type=\"button\"\r\n                  className=\"button\"\r\n                  id=\"true\"\r\n                  value=\"True\"\r\n                  onClick={() => toggleTF([\"True\"])}\r\n                />\r\n                <input\r\n                  style={\r\n                    correctAnswers[0] === \"False\"\r\n                      ? { boxShadow: \"0 0 15px cyan\" }\r\n                      : {}\r\n                  }\r\n                  type=\"button\"\r\n                  className=\"button\"\r\n                  id=\"false\"\r\n                  value=\"False\"\r\n                  onClick={() => toggleTF([\"False\"])}\r\n                />\r\n              </>\r\n            ) : type === QType.OPEN_ENDED ? (\r\n              <input\r\n                type=\"text\"\r\n                className=\"question-input\"\r\n                id=\"0\"\r\n                placeholder=\"Correct answer...\"\r\n                defaultValue=\"\"\r\n                value={correctAnswers[0]}\r\n                onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n                  updateAnswers(e)\r\n                }\r\n              />\r\n            ) : type === QType.CHOOSE_MANY ? (\r\n              <div>\r\n                <div id=\"choose-many-input\">\r\n                  {correctAnswers.map((_, index) => {\r\n                    let name = `choose-many-answers-${index}`;\r\n                    return (\r\n                      <input\r\n                        type=\"text\"\r\n                        name={name}\r\n                        className=\"question-input choose-many\"\r\n                        id={String(index)}\r\n                        key={index}\r\n                        defaultValue=\"\"\r\n                        value={correctAnswers[index]}\r\n                        placeholder=\"Correct answer...\"\r\n                        onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n                          updateAnswers(e)\r\n                        }\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n                <button\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    addAnswerInput();\r\n                  }}\r\n                >\r\n                  Add Answer\r\n                </button>\r\n              </div>\r\n            ) : null}\r\n\r\n            <br />\r\n            <br />\r\n          </form>\r\n        )}\r\n        <hr style={{ width: \"100%\" }} />\r\n        {!updateComplete ? (\r\n          <div id=\"submit-box\">\r\n            <input\r\n              type=\"button\"\r\n              className=\"button\"\r\n              value=\"Delete Question\"\r\n              id=\"delete\"\r\n              disabled={loading || updateComplete}\r\n              onClick={() => handleDelete()}\r\n            />\r\n            <input\r\n              className=\"button\"\r\n              type=\"submit\"\r\n              value=\"Save Question\"\r\n              id=\"submit\"\r\n              disabled={loading || updateComplete}\r\n              onClick={() => handleSubmit()}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <a href=\"/questions/create\">\r\n              <button>New Question</button>\r\n            </a>\r\n            <a href=\"/questions/viewAll\">\r\n              <button>All Questions</button>\r\n            </a>\r\n          </>\r\n        )}\r\n      </EditQuestionStyle>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\editQuestion\\EditQuestion.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\components\\questionCard\\QuestionCard.styles.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\openTrivia\\index.ts",[],"C:\\Users\\acsex\\KenzieProjects\\trivia_app\\client-ts\\src\\pages\\openTrivia\\OpenTriviaPage.tsx",["181","182","183"],"import { useEffect, useState } from 'react';\r\nimport { addQuestion, Difficulty, fetchFromOpenTrivia, Question, QType } from '../../API';\r\nimport { QuestionIndex } from '../../components';\r\nimport { ViewQuestionsStyle } from '../viewAllQuestions/ViewAllQuestions.styles';\r\nimport { v4 } from 'uuid';\r\nimport { htmlDecode } from '../../utils';\r\n\r\nexport const OpenTriviaPage = () => {\r\n    const [convertedQuestions, setConvertedQuestions] = useState<Question[]>([])\r\n    const [retrievedQuestions, setRetrievedQuestions] = useState([])\r\n    const [loading, setLoading] = useState(false);\r\n    const [converting, setConverting] = useState(false);\r\n    const [submissionActive, setSubmissionActive] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetchFromOpenTrivia()\r\n        .then(data => {\r\n            setRetrievedQuestions(data)\r\n            console.log(data.length)\r\n        })\r\n        setLoading(false)\r\n    }, []);\r\n\r\n    const convertQuestion = (raw: {\r\n        category: string;\r\n        correct_answer: string;\r\n        difficulty: string;\r\n        incorrect_answers: string[];\r\n        question: string;\r\n        type: string; \r\n    }): Question => {\r\n        setConverting(true);\r\n        let {\r\n            category,\r\n            correct_answer,\r\n            difficulty,\r\n            incorrect_answers,\r\n            question,\r\n            type\r\n        } = raw;\r\n\r\n        let newDifficulty = Difficulty.UNSET;\r\n        let newType = QType.MULTIPLE_CHOICE;\r\n\r\n        switch(difficulty) {\r\n            case 'easy':\r\n                newDifficulty = Difficulty.EASY;\r\n                break;\r\n            case 'medium':\r\n                newDifficulty = Difficulty.MEDIUM;\r\n                break;\r\n            case 'hard':\r\n                newDifficulty = Difficulty.HARD;\r\n                break;\r\n            default:\r\n                newDifficulty = Difficulty.UNSET\r\n        };\r\n\r\n        switch(type) {\r\n            case 'multiple':\r\n                newType = QType.MULTIPLE_CHOICE;\r\n                break;\r\n            case 'boolean':\r\n                newType = QType.TRUE_FALSE;\r\n                break;\r\n            default:\r\n                newType = QType.MULTIPLE_CHOICE;\r\n                break;\r\n        }\r\n\r\n        let newQuestion = new Question(\r\n            category,\r\n            newType,\r\n            newDifficulty,\r\n            question,\r\n            [correct_answer],\r\n            incorrect_answers,\r\n            \"Open Trivia DB\"\r\n        );\r\n        // category,\r\n        // correct_answers: [correct_answer],\r\n        // difficulty: newDifficulty,\r\n        // incorrect_answers,\r\n        // question: htmlDecode(question),\r\n        // type: newType,\r\n        // times_correct: 0,\r\n        // times_incorrect: 0,\r\n        // uploaded_by: 'Open Trivia DB',\r\n        // _id: '',\r\n        setConverting(false);\r\n        return newQuestion\r\n    }\r\n\r\n    const convertRetrievedQuestions = async () => {\r\n        if (!retrievedQuestions) {\r\n            console.log('No questions:', retrievedQuestions)\r\n            return\r\n        } else {\r\n            setSubmissionActive(true)\r\n            setConvertedQuestions([])\r\n            console.log(`Converting ${retrievedQuestions.length} questions...`)\r\n            retrievedQuestions.map((question) => {\r\n                // console.log('Converting Question:', question)\r\n                setConvertedQuestions(prev => [...prev, convertQuestion(question)])\r\n            })\r\n        }\r\n        setSubmissionActive(false)\r\n    }\r\n\r\n\r\n    return (\r\n        <ViewQuestionsStyle>\r\n            <h1> Open Trivia </h1>\r\n            {loading && <h3>Loading questions...</h3>}\r\n            {converting && <h3>Converting...</h3>}\r\n            <button\r\n            disabled={retrievedQuestions.length === 0 || loading}\r\n            onClick={() => {\r\n                setSubmissionActive(true)\r\n                convertRetrievedQuestions()\r\n                .then(() => {\r\n                    console.log(\"Converting complete:\", convertedQuestions)\r\n                    convertedQuestions.map(question => addQuestion(question))\r\n                })\r\n                .then(() => {\r\n                    console.log(\"Sumbission complete!\")\r\n                    setSubmissionActive(false)\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                    setSubmissionActive(false)\r\n                })\r\n            }}>Begin Submission</button>\r\n            {retrievedQuestions &&\r\n            <table id='question-table'>\r\n                <thead>\r\n                <tr id='header-row'>\r\n                    <th>Category</th>\r\n                    <th>Question</th>\r\n                    {/* <th>Answer</th> */}\r\n                    <th>Difficulty</th>\r\n                    <th>Type</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {retrievedQuestions &&\r\n                    retrievedQuestions.map(question => (\r\n                    <QuestionIndex\r\n                    question={question}\r\n                    key={v4()}\r\n                    />\r\n                    ))\r\n                }\r\n                </tbody>\r\n            </table>\r\n            }\r\n        </ViewQuestionsStyle>\r\n    )\r\n}",{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":103,"column":19,"nodeType":"190","messageId":"191","endLine":103,"endColumn":21},{"ruleId":"192","severity":1,"message":"193","line":149,"column":5,"nodeType":"194","messageId":"195","endLine":149,"endColumn":13},{"ruleId":"192","severity":1,"message":"196","line":150,"column":5,"nodeType":"194","messageId":"195","endLine":150,"endColumn":15},{"ruleId":"192","severity":1,"message":"197","line":151,"column":5,"nodeType":"194","messageId":"195","endLine":151,"endColumn":16},{"ruleId":"198","severity":1,"message":"199","line":177,"column":24,"nodeType":"200","messageId":"201","endLine":177,"endColumn":26},{"ruleId":"192","severity":1,"message":"202","line":6,"column":3,"nodeType":"194","messageId":"195","endLine":6,"endColumn":17},{"ruleId":"192","severity":1,"message":"203","line":9,"column":3,"nodeType":"194","messageId":"195","endLine":9,"endColumn":12},{"ruleId":"192","severity":1,"message":"204","line":29,"column":10,"nodeType":"194","messageId":"195","endLine":29,"endColumn":24},{"ruleId":"192","severity":1,"message":"205","line":29,"column":26,"nodeType":"194","messageId":"195","endLine":29,"endColumn":43},{"ruleId":"192","severity":1,"message":"206","line":41,"column":26,"nodeType":"194","messageId":"195","endLine":41,"endColumn":43},{"ruleId":"192","severity":1,"message":"207","line":2,"column":10,"nodeType":"194","messageId":"195","endLine":2,"endColumn":28},{"ruleId":"192","severity":1,"message":"208","line":17,"column":10,"nodeType":"194","messageId":"195","endLine":17,"endColumn":22},{"ruleId":"192","severity":1,"message":"209","line":18,"column":10,"nodeType":"194","messageId":"195","endLine":18,"endColumn":22},{"ruleId":"192","severity":1,"message":"210","line":19,"column":10,"nodeType":"194","messageId":"195","endLine":19,"endColumn":28},{"ruleId":"192","severity":1,"message":"211","line":19,"column":30,"nodeType":"194","messageId":"195","endLine":19,"endColumn":51},{"ruleId":"212","severity":1,"message":"213","line":84,"column":6,"nodeType":"214","endLine":84,"endColumn":53,"suggestions":"215"},{"ruleId":"192","severity":1,"message":"216","line":6,"column":3,"nodeType":"194","messageId":"195","endLine":6,"endColumn":21},{"ruleId":"192","severity":1,"message":"217","line":15,"column":10,"nodeType":"194","messageId":"195","endLine":15,"endColumn":19},{"ruleId":"212","severity":1,"message":"218","line":67,"column":6,"nodeType":"214","endLine":67,"endColumn":8,"suggestions":"219"},{"ruleId":"198","severity":1,"message":"220","line":279,"column":47,"nodeType":"200","messageId":"221","endLine":279,"endColumn":49},{"ruleId":"192","severity":1,"message":"222","line":6,"column":10,"nodeType":"194","messageId":"195","endLine":6,"endColumn":20},{"ruleId":"192","severity":1,"message":"223","line":13,"column":12,"nodeType":"194","messageId":"195","endLine":13,"endColumn":28},{"ruleId":"198","severity":1,"message":"199","line":103,"column":47,"nodeType":"200","messageId":"201","endLine":103,"endColumn":49},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'category' is assigned a value but never used.","Identifier","unusedVar","'questionID' is assigned a value but never used.","'uploaded_by' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'QuestionsState' is defined but never used.","'IQuestion' is defined but never used.","'currentAnswers' is assigned a value but never used.","'setCurrentAnswers' is assigned a value but never used.","'setTotalQuestions' is assigned a value but never used.","'deleteAllQuestions' is defined but never used.","'questionType' is assigned a value but never used.","'questionText' is assigned a value but never used.","'submittingQuestion' is assigned a value but never used.","'setSubmittingQuestion' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'difficulty' and 'question'. Either include them or remove the dependency array.","ArrayExpression",["226"],"'fetchSomeQuestions' is defined but never used.","'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'categories' and 'questionID'. Either include them or remove the dependency array.",["227"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'htmlDecode' is defined but never used.","'submissionActive' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},"Update the dependencies array to be: [times_correct, times_incorrect, type, loading, difficulty, question]",{"range":"232","text":"233"},"Update the dependencies array to be: [categories, questionID]",{"range":"234","text":"235"},[2556,2603],"[times_correct, times_incorrect, type, loading, difficulty, question]",[2026,2028],"[categories, questionID]"]